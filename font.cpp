/*
 font.cpp is part of the GlestNG RTS game engine.
 Licensed under the GNU AFFERO GENERAL PUBLIC LICENSE version 3
 See LICENSE for details
 (c) William Edwards, 2011; all rights reserved
*/

//http://www.tdb.fi/ttf2png.shtml

#include <inttypes.h>
#include <SDL_image.h>
#include <stdlib.h>
#include <assert.h>

#include "graphics.hpp"
#include "font.hpp"
#include "3d.hpp"

#include "font.dat"

struct {
	int img_w, img_h, size, ascent, descent;
} const font_meta = {256,256,23,23,-7};

struct font_glyph_t {
	uint8_t code;
	short x,y,w,h,ofs_x,ofs_y,advance;
} const font_glyth[] = {
	{32,37,22,0,0,0,0,6},{33,248,0,8,17,2,0,8},{34,175,193,10,6,4,11,11},
	{35,20,45,16,18,0,-1,13},{36,24,0,14,21,1,-3,13},{37,0,45,19,18,2,-1,20},
	{38,199,65,15,18,2,-1,17},{39,252,94,4,6,4,11,5},{40,200,125,10,22,1,-5,8},
	{41,226,125,10,22,-1,-5,8},{42,243,94,8,8,3,9,9},{43,191,189,12,12,2,0,13},
	{44,30,94,6,8,0,-5,6},{45,218,195,8,3,1,5,8},{46,251,106,5,3,1,0,6},
	{47,231,84,11,17,-1,0,6},{48,69,117,14,18,1,-1,13},{49,17,120,10,17,3,0,13},
	{50,0,138,15,17,0,0,13},{51,84,117,14,18,1,-1,13},{52,83,156,13,17,1,0,13},
	{53,99,117,14,18,1,-1,13},{54,114,117,14,18,1,-1,13},{55,97,156,13,17,3,0,13},
	{56,129,117,14,18,1,-1,13},{57,144,117,14,18,1,-1,13},{58,21,106,7,13,2,0,8},
	{59,28,131,8,18,1,-5,8},{60,135,190,14,13,1,-1,13},{61,78,193,14,9,1,1,13},
	{62,0,193,14,13,0,-1,13},{63,111,156,13,17,3,0,14},{64,0,0,23,21,1,-4,22},
	{65,56,84,17,17,0,0,17},{66,74,84,17,17,1,0,17},{67,76,65,17,18,2,-1,17},
	{68,92,84,17,17,1,0,17},{69,110,84,17,17,1,0,15},{70,128,84,17,17,1,0,14},
	{71,94,65,17,18,2,-1,18},{72,191,0,18,17,1,0,17},{73,139,156,8,17,1,0,6},
	{74,165,143,14,18,1,-1,13},{75,111,0,19,17,1,0,17},{76,125,156,13,17,1,0,14},
	{77,89,0,21,17,1,0,19},{78,210,0,18,17,1,0,17},{79,57,65,18,18,2,-1,18},
	{80,146,84,17,17,1,0,15},{81,216,61,18,19,2,-2,18},{82,229,0,18,17,1,0,17},
	{83,20,64,16,18,1,-1,15},{84,180,145,15,17,3,0,14},{85,112,65,17,18,2,-1,17},
	{86,237,146,15,17,4,0,15},{87,66,0,22,17,3,0,22},{88,131,0,19,17,0,0,15},
	{89,0,156,15,17,4,0,15},{90,164,84,17,17,0,0,14},{91,245,41,11,22,0,-5,8},
	{92,216,42,4,18,3,-1,6},{93,187,102,11,22,-1,-5,8},{94,244,83,12,10,2,6,13},
	{95,107,193,15,2,-2,-3,13},{96,252,101,4,4,4,14,8},{97,104,102,13,14,1,-1,13},
	{98,211,143,14,18,1,-1,14},{99,118,102,13,14,1,-1,13},{100,148,65,16,18,1,-1,14},
	{101,132,102,13,14,1,-1,13},{102,16,156,9,17,2,0,8},{103,165,65,16,18,0,-5,14},
	{104,200,84,14,17,1,0,14},{105,148,156,8,17,1,0,6},{106,196,148,10,22,-1,-5,6},
	{107,53,156,14,17,1,0,13},{108,26,169,8,17,1,0,6},{109,0,106,20,13,1,0,20},
	{110,34,193,14,13,1,0,14},{111,59,102,14,14,1,-1,14},{112,211,104,15,18,0,-5,14},
	{113,37,117,15,18,1,-5,14},{114,160,102,11,14,1,0,9},{115,146,102,13,14,1,-1,13},
	{116,196,171,8,17,2,-1,8},{117,74,102,14,14,2,-1,14},{118,243,183,13,13,2,0,13},
	{119,176,163,19,13,2,0,18},{120,227,183,15,13,0,0,13},{121,182,65,16,18,0,-5,13},
	{122,49,193,14,13,0,0,12},{123,226,148,10,22,1,-5,9},{124,243,103,7,22,1,-5,6},
	{125,165,162,10,22,0,-5,9},{126,116,196,12,4,2,3,13},{160,37,23,0,0,0,0,6},
	{161,218,171,8,17,0,-4,8},{162,65,174,13,18,1,-3,13},{163,237,164,14,18,1,-1,13},
	{164,89,102,14,14,1,1,13},{165,37,156,15,17,2,0,13},{166,29,108,7,22,1,-5,6},
	{167,16,83,13,22,1,-5,13},{168,25,196,8,3,3,14,8},{169,0,64,19,18,1,-1,17},
	{170,227,171,9,11,2,6,9},{171,153,175,11,11,3,1,13},{172,93,193,13,7,2,2,13},
	{173,107,196,8,3,1,5,8},{174,37,65,19,18,1,-1,17},{175,123,193,8,2,3,15,8},
	{176,25,187,8,8,5,8,14},{177,176,177,14,15,1,0,13},{178,15,174,10,10,1,7,8},
	{179,15,185,9,11,2,6,8},{180,30,103,6,4,5,14,8},{181,130,65,17,18,-2,-5,15},
	{182,242,18,14,22,2,-5,13},{183,251,110,4,3,3,4,6},{184,218,189,8,5,-1,-5,8},
	{185,30,83,6,10,3,7,6},{186,165,185,9,11,2,6,8},{187,153,187,11,11,2,1,13},
	{188,37,84,18,17,3,0,20},{189,151,0,19,17,3,0,20},{190,171,0,19,17,2,0,20},
	{191,244,64,12,18,1,-5,14},{192,19,22,17,22,0,0,17},{193,37,42,17,22,0,0,17},
	{194,55,42,17,22,0,0,17},{195,223,18,18,22,0,0,17},{196,73,42,17,22,0,0,17},
	{197,91,42,17,22,0,0,17},{198,39,0,26,17,0,0,23},{199,109,42,17,22,2,-5,17},
	{200,127,42,17,22,1,0,15},{201,145,42,17,22,1,0,15},{202,163,42,17,22,1,0,15},
	{203,181,42,17,22,1,0,15},{204,235,61,8,22,1,0,6},{205,199,102,11,22,1,0,6},
	{206,207,162,10,22,1,0,6},{207,231,102,11,22,1,0,6},{208,182,84,17,17,1,0,17},
	{209,0,22,18,22,1,0,17},{210,39,18,18,23,2,-1,18},{211,58,18,18,23,2,-1,18},
	{212,77,18,18,23,2,-1,18},{213,96,18,18,23,2,-1,18},{214,115,18,18,23,2,-1,18},
	{215,205,185,12,11,2,0,13},{216,223,41,21,19,0,-1,18},{217,134,18,17,23,2,-1,17},
	{218,152,18,17,23,2,-1,17},{219,170,18,17,23,2,-1,17},{220,188,18,17,23,2,-1,17},
	{221,215,81,15,22,4,0,15},{222,0,120,16,17,1,0,15},{223,53,117,15,18,1,-1,14},
	{224,67,136,13,19,1,-1,13},{225,81,136,13,19,1,-1,13},{226,95,136,13,19,1,-1,13},
	{227,79,174,13,18,1,-1,13},{228,93,174,13,18,1,-1,13},{229,109,136,13,19,1,-1,13},
	{230,37,102,21,14,1,-1,20},{231,107,174,13,18,1,-5,13},{232,123,136,13,19,1,-1,13},
	{233,137,136,13,19,1,-1,13},{234,151,136,13,19,1,-1,13},{235,121,174,13,18,1,-1,13},
	{236,157,156,7,18,1,0,6},{237,159,117,10,18,1,0,6},{238,27,150,9,18,1,0,6},
	{239,16,138,10,17,1,0,6},{240,172,102,14,20,1,-1,14},{241,68,156,14,17,1,0,14},
	{242,170,123,14,19,1,-1,14},{243,211,123,14,19,1,-1,14},{244,185,125,14,19,1,-1,14},
	{245,0,174,14,18,1,-1,14},{246,35,174,14,18,1,-1,14},{247,64,193,13,11,1,0,13},
	{248,135,174,17,15,0,-1,14},{249,237,126,14,19,2,-1,14},{250,37,136,14,19,2,-1,14},
	{251,52,136,14,19,2,-1,14},{252,50,174,14,18,2,-1,14},{253,206,18,16,23,0,-5,13},
	{254,0,83,15,22,0,-5,14},{255,199,42,16,22,0,-5,13}};
	
static const size_t num_glyths = (sizeof(font_glyth)/sizeof(font_glyph_t));
	
class font_mgr_t::impl_t: public font_mgr_t {
public:
	impl_t();
private:
	const font_glyph_t* get_glyth(int code) const;
	GLuint texture;
};

font_mgr_t::impl_t::impl_t() {
	if(!(IMG_Init(IMG_INIT_PNG)&IMG_INIT_PNG)) {
		fprintf(stderr,"IMG_Init: Failed to init required jpg and png support!\n");
		fprintf(stderr,"IMG_Init: %s\n", IMG_GetError());
		exit(EXIT_FAILURE);
	}
	SDL_Surface* bmp = IMG_Load_RW(SDL_RWFromConstMem(font_data,sizeof(font_data)),1);
	if(!bmp) {
		fprintf(stderr,"IMG_Load_RW: %s\n", IMG_GetError());
		exit(EXIT_FAILURE);
	}
	texture = graphics_mgr()->alloc_2D(bmp);
	SDL_FreeSurface(bmp);
	if(!texture) {
		fprintf(stderr,"Could not load embedded bitmap font\n");
		exit(EXIT_FAILURE);
	}
	printf("loaded embedded bitmap font: %dx%d\n",bmp->w,bmp->h);
}

const font_glyph_t* font_mgr_t::impl_t::get_glyth(int code) const {
	code -= font_glyth[0].code;
	if(code < 0) return NULL;
	if((size_t)code >= num_glyths) return NULL;
	assert(font_glyth[code].code == code);
	return font_glyth+code;
}
	
font_mgr_t* font_mgr_t::get_font_mgr() {
	static font_mgr_t* singleton = NULL;
	if(!singleton)
		singleton = new font_mgr_t::impl_t();
	return singleton;
}

