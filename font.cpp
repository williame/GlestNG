/*
 font.cpp is part of the GlestNG RTS game engine.
 Licensed under the GNU AFFERO GENERAL PUBLIC LICENSE version 3
 See LICENSE for details
 (c) William Edwards, 2011; all rights reserved
*/

//http://www.tdb.fi/ttf2png.shtml

#include <inttypes.h>
#include <stdlib.h>
#include <assert.h>
#include <SDL.h>

#include "graphics.hpp"
#include "font.hpp"
#include "3d.hpp"

// 12th C. Fancy Caps
struct {
	int height, base;
} const font_meta = {32,24};

struct font_glyph_t {
	uint8_t code;
	short x,y,w,h,ofs_x,ofs_y,advance;
} const font_glyth[] = {
{-1,235,154,20,23,1,5,21},{32,127,223,5,5,-2,24,10},{33,243,97,12,26,-1,1,10},
{34,145,205,12,15,-2,3,10},{35,212,154,22,23,-2,5,18},{36,0,39,19,33,-1,-1,17},
{37,76,187,20,22,-2,5,25},{38,184,154,27,23,-1,6,24},{39,175,204,11,13,-2,4,5},
{40,240,35,12,30,-1,1,10},{41,242,0,12,30,-2,1,10},{42,114,207,16,15,-2,2,11},
{43,51,161,28,25,-2,3,24},{44,131,207,13,15,-4,19,8},{45,198,199,21,8,-1,11,18},
{46,187,199,10,10,-1,18,8},{47,19,191,16,23,-2,4,8},{48,23,135,20,27,-2,1,15},
{49,137,130,14,27,-2,1,12},{50,216,127,19,26,-2,2,16},{51,0,164,18,26,-2,2,16},
{52,64,133,18,27,-2,2,16},{53,217,98,25,28,-2,0,17},{54,83,131,18,27,-1,1,16},
{55,44,133,19,27,-2,1,16},{56,19,164,16,26,-1,2,16},{57,102,131,17,27,-2,1,15},
{58,103,210,10,16,-1,10,8},{59,36,190,15,23,-3,10,10},{60,55,210,15,19,-1,7,13},
{61,158,205,16,14,0,10,17},{62,71,210,15,19,-1,7,12},{63,120,131,16,27,-2,3,16},
{64,52,187,23,22,-1,8,21},{65,93,0,36,34,-8,0,23},{66,143,35,36,31,-11,0,23},
{67,189,98,27,28,-1,1,24},{68,65,70,34,30,-4,-1,28},{69,74,101,30,29,-2,0,25},
{70,230,67,23,29,-4,0,17},{71,158,98,30,28,-2,1,26},{72,125,101,32,28,-2,1,27},
{73,77,0,15,35,0,-1,13},{74,194,0,24,34,-3,0,19},{75,161,67,26,30,-2,-1,20},
{76,213,35,26,31,-2,0,21},{77,130,0,32,34,-3,0,25},{78,101,35,41,31,-3,0,35},
{79,100,70,30,30,-3,-1,25},{80,131,67,29,30,-2,0,24},{81,20,39,44,32,-2,1,26},
{82,65,37,35,32,-1,-1,30},{83,0,73,23,31,-1,0,20},{84,180,35,32,31,-2,-2,27},
{85,0,105,39,29,-2,0,33},{86,40,103,33,29,-3,1,25},{87,24,72,40,30,-4,0,31},
{88,0,0,39,38,-7,-5,27},{89,40,0,36,36,-8,-2,27},{90,163,0,30,34,-2,-2,24},
{91,84,236,5,5,-2,24,8},{92,97,187,16,22,-2,5,12},{93,250,178,5,5,-2,24,8},
{94,242,198,5,5,-2,24,13},{95,0,235,24,6,-2,24,19},{96,248,198,5,5,-2,24,10},
{97,236,127,19,26,-1,3,13},{98,106,159,18,25,-2,3,14},{99,187,178,16,20,-2,8,12},
{100,150,158,19,24,-2,4,15},{101,105,101,19,29,-2,0,13},{102,0,191,18,23,-2,5,13},
{103,174,127,21,26,-2,8,17},{104,210,67,19,30,-2,1,15},{105,170,157,13,24,-2,4,8},
{106,188,67,21,30,-4,4,13},{107,196,127,19,26,-1,4,15},{108,36,163,14,26,-2,3,9},
{109,204,178,24,19,-2,9,20},{110,0,215,18,19,-1,9,15},{111,38,214,16,19,-2,9,11},
{112,152,130,21,26,-2,8,17},{113,219,0,22,34,-2,0,17},{114,19,215,18,19,-3,9,13},
{115,87,210,15,19,-2,9,11},{116,165,183,21,20,-3,9,15},{117,0,135,22,28,-2,1,15},
{118,114,185,20,21,-2,7,15},{119,135,184,29,20,-2,9,24},{120,125,159,24,24,-7,9,15},
{121,80,161,25,25,-6,7,17},{122,229,178,20,19,-2,9,16},{123,25,235,5,5,-2,24,10},
{124,31,235,5,5,-2,24,7},{125,37,235,5,5,-2,24,10},{126,43,234,5,5,-2,24,17},
{160,49,234,5,5,-2,24,10},{161,55,230,5,5,-2,24,10},{162,61,230,5,5,-2,24,16},
{163,67,230,5,5,-2,24,16},{164,73,230,5,5,-2,24,16},{165,79,230,5,5,-2,24,16},
{166,85,230,5,5,-2,24,7},{167,91,230,5,5,-2,24,16},{168,97,230,5,5,-2,24,10},
{169,103,227,5,5,-2,24,21},{170,109,227,5,5,-2,24,11},{171,115,223,5,5,-2,24,16},
{172,121,223,5,5,-2,24,17},{173,220,198,21,8,-1,11,18},{174,133,223,5,5,-2,24,21},
{175,139,223,5,5,-2,24,16},{176,145,221,5,5,-2,24,11},{177,151,221,5,5,-2,24,16},
{178,157,221,5,5,-2,24,10},{179,163,220,5,5,-2,24,10},{180,169,220,5,5,-2,24,10},
{181,175,218,5,5,-2,24,17},{182,181,218,5,5,-2,24,15},{183,187,210,5,5,-2,24,8},
{184,193,210,5,5,-2,24,10},{185,199,208,5,5,-2,24,10},{186,205,208,5,5,-2,24,10},
{187,211,208,5,5,-2,24,16},{188,217,208,5,5,-2,24,24},{189,223,207,5,5,-2,24,24},
{190,229,207,5,5,-2,24,24},{191,235,207,5,5,-2,24,18},{192,241,207,5,5,-2,24,19},
{193,247,204,5,5,-2,24,19},{194,0,242,5,5,-2,24,19},{195,6,242,5,5,-2,24,19},
{196,12,242,5,5,-2,24,19},{197,18,242,5,5,-2,24,19},{198,24,242,5,5,-2,24,29},
{199,30,241,5,5,-2,24,21},{200,36,241,5,5,-2,24,19},{201,42,241,5,5,-2,24,19},
{202,48,240,5,5,-2,24,19},{203,54,240,5,5,-2,24,19},{204,60,236,5,5,-2,24,8},
{205,66,236,5,5,-2,24,8},{206,72,236,5,5,-2,24,8},{207,78,236,5,5,-2,24,8},
{208,228,213,5,5,-2,24,21},{209,90,236,5,5,-2,24,21},{210,96,236,5,5,-2,24,22},
{211,102,236,5,5,-2,24,22},{212,108,233,5,5,-2,24,22},{213,114,233,5,5,-2,24,22},
{214,120,229,5,5,-2,24,22},{215,126,229,5,5,-2,24,17},{216,132,229,5,5,-2,24,22},
{217,138,229,5,5,-2,24,21},{218,144,229,5,5,-2,24,21},{219,150,227,5,5,-2,24,21},
{220,156,227,5,5,-2,24,21},{221,162,227,5,5,-2,24,19},{222,168,226,5,5,-2,24,19},
{223,174,226,5,5,-2,24,18},{224,180,224,5,5,-2,24,16},{225,186,224,5,5,-2,24,16},
{226,192,216,5,5,-2,24,16},{227,198,216,5,5,-2,24,16},{228,204,214,5,5,-2,24,16},
{229,210,214,5,5,-2,24,16},{230,216,214,5,5,-2,24,25},{231,222,214,5,5,-2,24,14},
{232,120,235,5,5,-2,24,16},{233,234,213,5,5,-2,24,16},{234,240,213,5,5,-2,24,16},
{235,246,213,5,5,-2,24,16},{236,0,248,5,5,-2,24,8},{237,6,248,5,5,-2,24,8},
{238,12,248,5,5,-2,24,8},{239,18,248,5,5,-2,24,8},{240,24,248,5,5,-2,24,16},
{241,30,247,5,5,-2,24,16},{242,36,247,5,5,-2,24,16},{243,42,247,5,5,-2,24,16},
{244,48,246,5,5,-2,24,16},{245,54,246,5,5,-2,24,16},{246,60,242,5,5,-2,24,16},
{247,66,242,5,5,-2,24,16},{248,72,242,5,5,-2,24,18},{249,78,242,5,5,-2,24,16},
{250,84,242,5,5,-2,24,16},{251,90,242,5,5,-2,24,16},{253,102,242,5,5,-2,24,14},
{254,108,239,5,5,-2,24,16},{255,114,239,5,5,-2,24,14}};

static const size_t num_glyths = (sizeof(font_glyth)/sizeof(font_glyph_t));
	
class font_mgr_t::impl_t: public font_mgr_t {
public:
	impl_t();
private:
	const font_glyph_t* get_glyth(int code) const;
	GLuint texture;
};

font_mgr_t::impl_t::impl_t() {
	SDL_Surface* bmp = SDL_LoadBMP("font.bmp");
	if(!bmp) {
		fprintf(stderr,"SDL_Load: %s\n", SDL_GetError());
		exit(EXIT_FAILURE);
	}
	texture = graphics_mgr()->alloc_2D(bmp);
	SDL_FreeSurface(bmp);
	if(!texture) {
		fprintf(stderr,"Could not load embedded bitmap font\n");
		exit(EXIT_FAILURE);
	}
	printf("loaded embedded bitmap font: %dx%d\n",bmp->w,bmp->h);
}

const font_glyph_t* font_mgr_t::impl_t::get_glyth(int code) const {
	code -= font_glyth[0].code;
	if(code < 0) return NULL;
	if((size_t)code >= num_glyths) return NULL;
	assert(font_glyth[code].code == code);
	return font_glyth+code;
}
	
font_mgr_t* font_mgr_t::get_font_mgr() {
	static font_mgr_t* singleton = NULL;
	if(!singleton)
		singleton = new font_mgr_t::impl_t();
	return singleton;
}

